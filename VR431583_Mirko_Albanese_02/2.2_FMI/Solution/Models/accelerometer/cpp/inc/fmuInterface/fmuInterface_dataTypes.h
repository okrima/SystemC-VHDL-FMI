// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 2017.05.1-antlia
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef FMUINTERFACE_DATATYPES_HH
#define FMUINTERFACE_DATATYPES_HH

#include <cstddef>
#include <cstring>
#include <fmi2Functions.h>
#include <new>
#include <stdint.h>
#include "../accelerometer.hpp"


#define MODEL_GUID "03342b0f-b624-4902-bec6-11e1fae4a886"


#ifdef __cplusplus
extern "C" {
#endif

struct ModelInstance{
    accelerometer * model;
    accelerometer::accelerometer_iostruct * iostruct;
    char * instanceName;
    int32_t cycle_number;
    fmi2Real time;
    const fmi2CallbackFunctions * functions;
    fmi2Boolean logEvents;
    fmi2Boolean logSingularLinearSystems;
    fmi2Boolean logNonlinearSystems;
    fmi2Boolean logDynamicStateSelection;
    fmi2Boolean logStatusWarning;
    fmi2Boolean logStatusDiscard;
    fmi2Boolean logStatusError;
    fmi2Boolean logStatusFatal;
    fmi2Boolean logStatusPending;
    fmi2Boolean logAll;

    ModelInstance():
        model(nullptr),
        iostruct(nullptr),
        instanceName(nullptr),
        cycle_number(0L),
        time(0.0),
        functions(nullptr),
        logEvents(0L),
        logSingularLinearSystems(0L),
        logNonlinearSystems(0L),
        logDynamicStateSelection(0L),
        logStatusWarning(0L),
        logStatusDiscard(0L),
        logStatusError(0L),
        logStatusFatal(0L),
        logStatusPending(0L),
        logAll(0L)
    {}

    ModelInstance( accelerometer * model_0, accelerometer::accelerometer_iostruct
         * iostruct_0, char * instanceName_0, const int32_t cycle_number_0, const
         fmi2Real time_0, fmi2CallbackFunctions * functions_0, const fmi2Boolean
         logEvents_0, const fmi2Boolean logSingularLinearSystems_0, const fmi2Boolean
         logNonlinearSystems_0, const fmi2Boolean logDynamicStateSelection_0, const
         fmi2Boolean logStatusWarning_0, const fmi2Boolean logStatusDiscard_0, const
         fmi2Boolean logStatusError_0, const fmi2Boolean logStatusFatal_0, const
         fmi2Boolean logStatusPending_0, const fmi2Boolean logAll_0 ):
        model(model_0),
        iostruct(iostruct_0),
        instanceName(instanceName_0),
        cycle_number(cycle_number_0),
        time(time_0),
        functions(functions_0),
        logEvents(logEvents_0),
        logSingularLinearSystems(logSingularLinearSystems_0),
        logNonlinearSystems(logNonlinearSystems_0),
        logDynamicStateSelection(logDynamicStateSelection_0),
        logStatusWarning(logStatusWarning_0),
        logStatusDiscard(logStatusDiscard_0),
        logStatusError(logStatusError_0),
        logStatusFatal(logStatusFatal_0),
        logStatusPending(logStatusPending_0),
        logAll(logAll_0)
    {}

    ~ModelInstance()
    {}

    bool operator == (const ModelInstance & other) const
    {
        if (model != other.model) return false;
        if (iostruct != other.iostruct) return false;
        if (instanceName != other.instanceName) return false;
        if (cycle_number != other.cycle_number) return false;
        if (time != other.time) return false;
        if (functions != other.functions) return false;
        if (logEvents != other.logEvents) return false;
        if (logSingularLinearSystems != other.logSingularLinearSystems) return false;
        if (logNonlinearSystems != other.logNonlinearSystems) return false;
        if (logDynamicStateSelection != other.logDynamicStateSelection) return false;
        if (logStatusWarning != other.logStatusWarning) return false;
        if (logStatusDiscard != other.logStatusDiscard) return false;
        if (logStatusError != other.logStatusError) return false;
        if (logStatusFatal != other.logStatusFatal) return false;
        if (logStatusPending != other.logStatusPending) return false;
        if (logAll != other.logAll) return false;
        return true;
    }
};
static 
void freeInstance( ModelInstance * comp );


fmi2Component fmi2Instantiate( fmi2String instanceName, fmi2Type fmuType, fmi2String
     fmuGUID, fmi2String fmuResourceLocation, const fmi2CallbackFunctions * functions,
     fmi2Boolean visible, fmi2Boolean loggingOn );


fmi2Status fmi2SetupExperiment( fmi2Component c, fmi2Boolean toleranceDefined, fmi2Real
     tolerance, fmi2Real startTime, fmi2Boolean stopTimeDefined, fmi2Real stopTime
     );


fmi2Status fmi2EnterInitializationMode( fmi2Component c );


fmi2Status fmi2ExitInitializationMode( fmi2Component c );


fmi2Status fmi2Terminate( fmi2Component c );


fmi2Status fmi2Reset( fmi2Component c );


void fmi2FreeInstance( fmi2Component c );

const 
char * fmi2GetVersion();

const 
char * fmi2GetTypesPlatform();


fmi2Status fmi2SetDebugLogging( fmi2Component c, fmi2Boolean loggingOn, size_t nCategories,
     const fmi2String * categories );


fmi2Status fmi2GetReal( fmi2Component c, const fmi2ValueReference * vr, size_t nvr,
     fmi2Real * value );


fmi2Status fmi2GetInteger( fmi2Component c, const fmi2ValueReference * vr, size_t
     nvr, fmi2Integer * value );


fmi2Status fmi2GetBoolean( fmi2Component c, const fmi2ValueReference * vr, size_t
     nvr, fmi2Boolean * value );


fmi2Status fmi2GetString( fmi2Component c, const fmi2ValueReference * vr, size_t
     nvr, fmi2String * value );


fmi2Status fmi2SetReal( fmi2Component c, const fmi2ValueReference * vr, size_t nvr,
     const fmi2Real * value );


fmi2Status fmi2SetInteger( fmi2Component c, const fmi2ValueReference * vr, size_t
     nvr, const fmi2Integer * value );


fmi2Status fmi2SetBoolean( fmi2Component c, const fmi2ValueReference * vr, size_t
     nvr, const fmi2Boolean * value );


fmi2Status fmi2SetString( fmi2Component c, const fmi2ValueReference * vr, size_t
     nvr, const fmi2String * value );


fmi2Status fmi2CancelStep( fmi2Component c );


fmi2Status fmi2DoStep( fmi2Component c, fmi2Real currentCommunicationPoint, fmi2Real
     communicationStepSize, fmi2Boolean noSetFMUStatePriorToCurrentPoint );


fmi2Status fmi2GetStatus( fmi2Component c, const fmi2StatusKind s, fmi2Status *
     value );


fmi2Status fmi2GetRealStatus( fmi2Component c, const fmi2StatusKind s, fmi2Real
     * value );


fmi2Status fmi2GetIntegerStatus( fmi2Component c, const fmi2StatusKind s, fmi2Integer
     * value );


fmi2Status fmi2GetBooleanStatus( fmi2Component c, const fmi2StatusKind s, fmi2Boolean
     * value );


fmi2Status fmi2GetStringStatus( fmi2Component c, const fmi2StatusKind s, fmi2String
     * value );


fmi2Status fmi2SetRealInputDerivatives( fmi2Component c, const fmi2ValueReference
     * vr, size_t nvr, const fmi2Integer * order, const fmi2Real * value );


fmi2Status fmi2GetRealOutputDerivatives( fmi2Component c, const fmi2ValueReference
     * vr, size_t nvr, const fmi2Integer * order, fmi2Real * value );


#ifdef __cplusplus
} // end extern "C"
#endif


#endif
